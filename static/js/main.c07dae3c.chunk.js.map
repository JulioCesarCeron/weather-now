{"version":3,"sources":["components/cards/WeatherCard/WeatherCard.module.css","assets/logo.svg","assets/loader.svg","components/main/Main.module.css","components/header/Header.js","components/cards/WeatherCard/WeatherCard.js","config/api.js","config/endpoints.js","config/utils.js","components/main/Main.js","index.js","components/header/Header.module.css"],"names":["module","exports","Header","className","styles","container","src","logo","alt","WeatherCard","main","city","country","delay","useState","loading","setLoading","error","setError","temp","humidity","pressure","date","weather","setWeather","onGetDataFromWeather","useCallback","api","url","WEATHER_API","axios","get","then","res","data","receivedData","Number","toFixed","Date","localStorage","setItem","toLowerCase","JSON","stringify","catch","err","verifyLastUpdate","savedCityInfo","localStorageData","parse","localDate","diffMinutes","getTime","getDiffBetweenCurrentAndLocalDate","useEffect","onGetLocalData","a","getItem","localSavedCityInfo","setInterval","temperature","temperatureValueComponent","loader","requestErrorMessage","onClick","card","header","footer","toLocaleString","hour","minute","hour12","Main","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c07dae3c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"WeatherCard_card__3v955\",\"header\":\"WeatherCard_header__1QQCK\",\"main\":\"WeatherCard_main__1dei7\",\"temperature\":\"WeatherCard_temperature__Mnppv\",\"cold\":\"WeatherCard_cold__2JND7\",\"medium\":\"WeatherCard_medium__3YcJO\",\"hot\":\"WeatherCard_hot__534yN\",\"footer\":\"WeatherCard_footer__2PAnV\",\"footer-loading\":\"WeatherCard_footer-loading__18mfm\",\"main-footer-loading\":\"WeatherCard_main-footer-loading__27l-8\",\"content-footer\":\"WeatherCard_content-footer__3JicL\",\"wrapper-content-footer\":\"WeatherCard_wrapper-content-footer__14hv3\",\"value-indicator\":\"WeatherCard_value-indicator__1G4_o\",\"info-update\":\"WeatherCard_info-update__rM3lT\",\"wrapper-error-message\":\"WeatherCard_wrapper-error-message__3ML3Q\",\"card-order\":\"WeatherCard_card-order__21hHo\"};","module.exports = __webpack_public_path__ + \"static/media/logo.45377fd6.svg\";","module.exports = __webpack_public_path__ + \"static/media/loader.d542c686.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Main_container__E2cZj\",\"wrapper-weather\":\"Main_wrapper-weather__1b7RP\",\"wrapper-weather-cards\":\"Main_wrapper-weather-cards__1dPiJ\"};","import React from 'react';\n\nimport logo from '../../assets/logo.svg';\nimport styles from './Header.module.css';\n\nconst Header = () => {\n  return (\n    <div className={styles.container} >\n      <img src={logo} className={styles.logo} alt=\"logo\" />\n    </div>\n  );\n};\n\nexport default Header;","import React, { useEffect, useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './WeatherCard.module.css'\nimport { getWeater } from '../../../config/api'\nimport { WEATHER_API } from '../../../config/endpoints'\nimport loader from '../../../assets/loader.svg';\nimport {\n  kelvinToCelcius,\n  getTimeFormat12h,\n  getColorTemperature,\n  getDiffBetweenCurrentAndLocalDate,\n  setLocalData,\n  getLocalData,\n} from '../../../config/utils'\n\n\nconst WeatherCard = ({ main, city, country, delay }) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [weather, setWeather] = useState({\n    temp: '',\n    humidity: '',\n    pressure: '',\n    date: '',\n  });\n\n  const onGetDataFromWeather = useCallback(() => {\n    setError(false);\n    setLoading(true);\n    const url = WEATHER_API(city, country);\n    getWeater(url).then(res => {\n      const receivedData = {\n        temp: kelvinToCelcius(res.data.main.temp),\n        humidity: res.data.main.humidity,\n        pressure: res.data.main.pressure,\n        date: new Date(),\n      }\n\n      setWeather({ ...receivedData });\n\n      setLocalData({\n        city,\n        country,\n        weather: receivedData,\n      });\n\n      setLoading(false);\n\n    }).catch(err => {\n      setError(true);\n    });\n  }, [city, country]);\n\n  const verifyLastUpdate = useCallback((savedCityInfo) => {\n    const localStorageData = JSON.parse(savedCityInfo);\n    const minutes = getDiffBetweenCurrentAndLocalDate(localStorageData);\n    if (minutes > delay) {\n      onGetDataFromWeather();\n    } else {\n      setWeather({ ...localStorageData });\n    }\n  }, [onGetDataFromWeather, delay])\n\n\n  useEffect(() => {\n    const onGetLocalData = async() => {\n      const localSavedCityInfo = await getLocalData({city, country});\n      if (!localSavedCityInfo) {\n        onGetDataFromWeather();\n      } else {\n        verifyLastUpdate(localSavedCityInfo);\n      }\n    }\n\n    onGetLocalData();\n    setInterval(() => onGetLocalData(), 120000)\n  }, [city, country, onGetDataFromWeather, verifyLastUpdate])\n\n  const temperatureValueComponent = loading\n    ? <img src={loader} className={styles.logo} alt=\"logo\" />\n    : <p className={`${styles.temperature} ${styles[getColorTemperature(weather.temp)]}`}>{weather.temp}ยบ</p>\n\n  const requestErrorMessage = (\n    <div className={styles['wrapper-error-message']}>\n      <p>Someting went wrong</p>\n      <button onClick={()=> onGetDataFromWeather()} >Try Again</button>\n    </div>\n  )\n\n  return (\n    <div className={`${styles.card} ${main && styles['card-order']}`}>\n      <header className={styles.header}>\n        <h3>{`${city}, ${country}`}</h3>\n      </header>\n      <main className={styles.main}>\n      {!error\n        ? temperatureValueComponent\n        : requestErrorMessage\n      }\n      </main>\n      <footer className={`${loading ? styles['footer-loading'] : styles.footer} ${(main && loading) && styles['main-footer-loading']}`}>\n        {(main && !loading) && (\n          <div className={styles['wrapper-content-footer']}>\n            <div className={styles['content-footer']} >\n              <p>HUMIDITY</p>\n              <p className={styles['value-indicator']}>{weather.humidity}<small>%</small></p>\n            </div>\n            <div className={styles['content-footer']} >\n              <p>PRESSURE</p>\n              <p className={styles['value-indicator']}>{weather.pressure}<small>hPa</small></p>\n            </div>\n          </div>\n        )}\n        {!loading && <p className={styles['info-update']}>Updated at {getTimeFormat12h(weather.date)}</p>}\n      </footer>\n    </div>\n  );\n};\n\nWeatherCard.propTypes = {\n  city: PropTypes.string.isRequired,\n  country: PropTypes.string.isRequired,\n  delay: PropTypes.number.isRequired,\n}\n\nexport default WeatherCard;","import axios from \"axios\";\n\nexport const getWeater = (api) => {\n  return axios.get(api)\n}","\nconst API_KEY = '8561a5b7b131a9f8f6f5996bf4bb2c07';\nexport const WEATHER_API = (city, country) => `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}`;","export const kelvinToCelcius = (temp) => {\n  return Number((temp - 273.15).toFixed(0));\n}\n\nexport const getTimeFormat12h = (date) => {\n  return  date ? new Date(date).toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true }) : '';\n};\n\nexport const getColorTemperature = (temperature) => {\n  if (temperature <= 5) {\n    return 'cold';\n  }\n\n  if (temperature > 5 && temperature <= 25) {\n    return 'medium';\n  }\n\n  return 'hot'\n}\n\nexport const getDiffBetweenCurrentAndLocalDate = (savedCityInfo) => {\n  const localDate = new Date(savedCityInfo.date);\n  const currentDate = new Date();\n  const diffMinutes = (((currentDate.getTime() - localDate.getTime()) / 1000) / 60).toFixed();\n  return Number(diffMinutes);\n}\n\nexport const getLocalData = (data) => {\n  return localStorage.getItem((`${data.city}${data.country}`).toLowerCase());\n}\n\nexport const setLocalData = (data) => {\n  localStorage.setItem((`${data.city}${data.country}`).toLowerCase(), JSON.stringify(data.weather));\n}","import React from \"react\";\n\nimport styles from \"./Main.module.css\";\nimport Header from \"../header/Header\";\nimport WeatherCard from '../cards/WeatherCard/WeatherCard'\n\n\nfunction Main() {\n  return (\n    <main className={styles.container}>\n      <Header />\n      <div className={styles['wrapper-weather']}>\n      <hr/>\n        <section className={styles['wrapper-weather-cards']}>\n          <WeatherCard\n            city='Nuuk'\n            country='GL'\n            delay={10}\n          />\n          <WeatherCard\n            main\n            city='Urubici'\n            country='BR'\n            delay={10}\n          />\n          <WeatherCard\n            city='Nairobi'\n            country='KE'\n            delay={10}\n          />\n        </section>\n      </div>\n    </main>\n  );\n}\n\nexport default Main;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './components/main/Main';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Header_container__27QFJ\",\"logo\":\"Header_logo__3EvUy\"};"],"sourceRoot":""}