{"version":3,"sources":["components/cards/WeatherCard/WeatherCard.module.css","assets/logo.svg","assets/loader.svg","components/main/Main.module.css","components/header/Header.js","config/api.js","components/cards/WeatherCard/WeatherCard.js","config/index.js","components/main/Main.js","serviceWorker.js","index.js","components/header/Header.module.css"],"names":["module","exports","Header","className","styles","container","src","logo","alt","setLocalData","data","localStorage","setItem","city","country","toLowerCase","JSON","stringify","weather","WeatherCard","main","useState","loading","setLoading","temp","humidity","pressure","setWeather","useEffect","setComponentData","receivedData","console","log","onGetDataFromWeather","api","url","WEATHER_API","axios","get","then","res","toFixed","date","Date","onSetLocalData","verifyLastUpdate","savedCityInfo","localStorageData","parse","localDate","diffMinutes","getTime","getDiffBetweenCurrentAndLocalDate","onGetLocalData","a","getItem","localSavedCityInfo","setInterval","card","header","loader","temperature","footer","Main","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9231c8b9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"WeatherCard_card__3v955\",\"header\":\"WeatherCard_header__1QQCK\",\"main\":\"WeatherCard_main__1dei7\",\"temperature\":\"WeatherCard_temperature__Mnppv\",\"cold\":\"WeatherCard_cold__2JND7\",\"medium\":\"WeatherCard_medium__3YcJO\",\"hot\":\"WeatherCard_hot__534yN\",\"footer\":\"WeatherCard_footer__2PAnV\",\"footer-loading\":\"WeatherCard_footer-loading__18mfm\",\"content-footer\":\"WeatherCard_content-footer__3JicL\",\"wrapper-content-footer\":\"WeatherCard_wrapper-content-footer__14hv3\",\"value-indicator\":\"WeatherCard_value-indicator__1G4_o\",\"info-update\":\"WeatherCard_info-update__rM3lT\",\"card-order\":\"WeatherCard_card-order__21hHo\"};","module.exports = __webpack_public_path__ + \"static/media/logo.45377fd6.svg\";","module.exports = __webpack_public_path__ + \"static/media/loader.d542c686.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Main_container__E2cZj\",\"wrapper-weather\":\"Main_wrapper-weather__1b7RP\",\"wrapper-weather-cards\":\"Main_wrapper-weather-cards__1dPiJ\"};","import React from 'react';\n\nimport logo from '../../assets/logo.svg';\nimport styles from './Header.module.css';\n\nconst Header = () => {\n  return (\n    <div className={styles.container} >\n      <img src={logo} className={styles.logo} alt=\"logo\" />\n    </div>\n  );\n};\n\nexport default Header;","import axios from \"axios\";\n\nexport const getWeater = (api) => {\n  return axios.get(api)\n}\n\nexport const getLocalData = (data) => {\n  return localStorage.getItem((`${data.city}${data.country}`).toLowerCase());\n}\n\nexport const setLocalData = (data) => {\n  localStorage.setItem((`${data.city}${data.country}`).toLowerCase(), JSON.stringify(data.weather));\n}","import React, { useEffect, useState } from 'react';\n\nimport styles from './WeatherCard.module.css'\nimport { getWeater, getLocalData, setLocalData} from '../../../config/api'\nimport { WEATHER_API } from '../../../config/index'\nimport loader from '../../../assets/loader.svg';\n\nconst kelvinToCelcius = (temp) => {\n  return (temp - 273.15).toFixed(0);\n}\n\nconst WeatherCard = ({ main, city, country }) => {\n  const [loading, setLoading] = useState(false);\n  const [weather, setWeather] = useState({\n    temp: '',\n    humidity: '',\n    pressure: ''\n  });\n\n  const getDiffBetweenCurrentAndLocalDate = (savedCityInfo) => {\n    const localDate = new Date(savedCityInfo.date);\n    const currentDate = new Date();\n    const diffMinutes = (((currentDate.getTime() - localDate.getTime()) / 1000) / 60).toFixed();\n    console.log('diffMinutes', diffMinutes);\n    return diffMinutes;\n  }\n\n  useEffect(() => {\n\n    const setComponentData = (receivedData) => {\n      console.log('receivedData', receivedData);\n      if (main) {\n        setWeather({ ...receivedData });\n      } else {\n        setWeather({\n          temp: receivedData.temp,\n        })\n      }\n    }\n\n    const onGetDataFromWeather = () => {\n      setLoading(true);\n      const url = WEATHER_API(city, country);\n      getWeater(url).then(res => {\n        setLoading(false);\n\n        const receivedData = {\n          temp: kelvinToCelcius(res.data.main.temp),\n          humidity: res.data.main.humidity,\n          pressure: res.data.main.pressure,\n          date: new Date(),\n        }\n\n        setComponentData(receivedData)\n\n        onSetLocalData({\n          city,\n          country,\n          weather: receivedData,\n        })\n      });\n    }\n\n    const verifyLastUpdate = (savedCityInfo) => {\n      const localStorageData = JSON.parse(savedCityInfo);\n      const minutes = getDiffBetweenCurrentAndLocalDate(localStorageData)\n      if (minutes >= 10) {\n        onGetDataFromWeather();\n      } else {\n        setComponentData(localStorageData);\n      }\n    }\n    \n    const onGetLocalData = async() => {\n      const localSavedCityInfo = await getLocalData({city, country});\n      if (!localSavedCityInfo) {\n        onGetDataFromWeather();\n      } else {\n        verifyLastUpdate(localSavedCityInfo);\n      }\n    }\n\n    const onSetLocalData = async (data) => {\n      await setLocalData(data);\n    }\n\n    onGetLocalData();\n    setInterval(() => onGetLocalData(), 50000);\n    \n  }, [city, country, main])\n\n  const getColorTemperature = () => {\n    if (weather.temp <= 5) {\n      return 'cold';\n    }\n\n    if (weather.temp > 5 && weather.temp <= 25) {\n      return 'medium';\n    }\n\n    return 'hot'\n  }\n\n  return (\n    <div className={`${styles.card} ${main && styles['card-order']}`}>\n      <div className={styles.header}>\n        <h3>{`${city}, ${country}`}</h3>\n      </div>\n      <div className={styles.main}>\n      {\n        loading\n          ? <img src={loader} className={styles.logo} alt=\"logo\" />\n          : <p className={`${styles.temperature} ${styles[getColorTemperature()]}`}>{weather.temp}ยบ</p>\n      }\n      </div>\n      <div className={ loading ? styles['footer-loading'] : styles.footer}>\n        {main && (\n          <div className={styles['wrapper-content-footer']}>\n            <div className={styles['content-footer']} >\n              <p>HUMIDITY</p>\n              <p className={styles['value-indicator']}>{weather.humidity}<small>%</small></p>\n            </div>\n            <div className={styles['content-footer']} >\n              <p>PRESSURE</p>\n              <p className={styles['value-indicator']}>{weather.pressure}<small>hPa</small></p>\n            </div>\n          </div>\n        )}\n        {!loading && <p className={styles['info-update']}>Updated at 02:48:27 PM</p>}\n      </div>\n    </div>\n  );\n};\n\nexport default WeatherCard;","\nconst API_KEY = '8561a5b7b131a9f8f6f5996bf4bb2c07';\nexport const WEATHER_API = (city, country) => `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}`;","import React from \"react\";\n\nimport styles from \"./Main.module.css\";\nimport Header from \"../header/Header\";\nimport WeatherCard from '../cards/WeatherCard/WeatherCard'\n\n\nfunction Main() {\n  return (\n    <div className={styles.container}>\n      <Header />\n      <div className={styles['wrapper-weather']}>\n      <hr/>\n        <div className={styles['wrapper-weather-cards']}>\n          <WeatherCard city='Nuuk' country='GL' />\n          <WeatherCard main city='Urubici' country='BR' />\n          <WeatherCard city='Nairobi' country='KE' />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './components/main/Main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Header_container__27QFJ\",\"logo\":\"Header_logo__3EvUy\"};"],"sourceRoot":""}